/*******************************************************************
  DCT module used LLM algorithm (based IJG jfdctint.c)
 *******************************************************************/

#include <cstdint>

enum {
  FIX_0_298631336 = 2446,
  FIX_0_390180644 = 3196,
  FIX_0_541196100 = 4433,
  FIX_0_765366865 = 6270,
  FIX_0_899976223 = 7373,
  FIX_1_175875602 = 9633,
  FIX_1_501321110 = 12299,
  FIX_1_847759065 = 15137,
  FIX_1_961570560 = 16069,
  FIX_2_053119869 = 16819,
  FIX_2_562915447 = 20995,
  FIX_3_072711026 = 25172
};

#pragma omp declare simd uniform(block) inbranch
void dct_int32(int_fast32_t &block) {

  int_fast32_t w0, w1, w2, w3, w4, w5, w6, w7;
  int_fast32_t w10, w11, w12, w13;
  int_fast32_t z1, z2, z3, z4, z5;

  int_fast32_t *s = &block;
  int_fast32_t *w = &block;

#pragma omp simd
  for (int_fast16_t i = 0; i < 8; i++) {
    /* row DCT */
    w0   = s[0] + s[7];
    w7   = s[0] - s[7];
    w1   = s[1] + s[6];
    w6   = s[1] - s[6];
    w2   = s[2] + s[5];
    w5   = s[2] - s[5];
    w3   = s[3] + s[4];
    w4   = s[3] - s[4];

    w10  = w0 + w3;
    w13  = w0 - w3;
    w11  = w1 + w2;
    w12  = w1 - w2;

    w[0] = (w10 + w11) << 4;
    w[4] = (w10 - w11) << 4;

    z1   = (w12 + w13) * FIX_0_541196100;
    w[2] = (z1 + w13 * FIX_0_765366865) >> 9;
    w[6] = (z1 + w12 * -FIX_1_847759065) >> 9;

    z1   = w4 + w7;
    z2   = w5 + w6;
    z3   = w4 + w6;
    z4   = w5 + w7;
    z5   = (z3 + z4) * FIX_1_175875602;
    w4 *= FIX_0_298631336;
    w5 *= FIX_2_053119869;
    w6 *= FIX_3_072711026;
    w7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;
    z2 *= -FIX_2_562915447;
    z3 *= -FIX_1_961570560;
    z4 *= -FIX_0_390180644;

    z3 += z5;
    z4 += z5;

    w[7] = (w4 + z1 + z3) >> 9;
    w[5] = (w5 + z2 + z4) >> 9;
    w[3] = (w6 + z2 + z3) >> 9;
    w[1] = (w7 + z1 + z4) >> 9;

    w += 8;
    s += 8;
  }

  w               = &block;
  int_fast32_t *d = &block;

#pragma omp simd
  for (int_fast16_t i = 0; i < 8; i++) {
    /* col DCT */
    w0       = w[8 * 0] + w[8 * 7];
    w7       = w[8 * 0] - w[8 * 7];
    w1       = w[8 * 1] + w[8 * 6];
    w6       = w[8 * 1] - w[8 * 6];
    w2       = w[8 * 2] + w[8 * 5];
    w5       = w[8 * 2] - w[8 * 5];
    w3       = w[8 * 3] + w[8 * 4];
    w4       = w[8 * 3] - w[8 * 4];

    w10      = w0 + w3;
    w13      = w0 - w3;
    w11      = w1 + w2;
    w12      = w1 - w2;

    d[8 * 0] = (w10 + w11 + (1 << 6)) >> 7;
    d[8 * 4] = (w10 - w11 + (1 << 6)) >> 7;
    z1       = (w12 + w13) * FIX_0_541196100;
    d[8 * 2] = (z1 + w13 * FIX_0_765366865 + (1 << 19)) >> 20;
    d[8 * 6] = (z1 + w12 * -FIX_1_847759065 + (1 << 19)) >> 20;

    z1       = w4 + w7;
    z2       = w5 + w6;
    z3       = w4 + w6;
    z4       = w5 + w7;
    z5       = (z3 + z4) * FIX_1_175875602;
    w4 *= FIX_0_298631336;
    w5 *= FIX_2_053119869;
    w6 *= FIX_3_072711026;
    w7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;
    z2 *= -FIX_2_562915447;
    z3 *= -FIX_1_961570560;
    z4 *= -FIX_0_390180644;

    z3 += z5;
    z4 += z5;

    d[8 * 7] = (w4 + z1 + z3 + (1 << 19)) >> 20;
    d[8 * 5] = (w5 + z2 + z4 + (1 << 19)) >> 20;
    d[8 * 3] = (w6 + z2 + z3 + (1 << 19)) >> 20;
    d[8 * 1] = (w7 + z1 + z4 + (1 << 19)) >> 20;

    w++;
    d++;
  }
}
